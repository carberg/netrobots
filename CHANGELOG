Change Log
==========

2016-04-30
----------

Server:

* Switched to pure REST API (no ZMQ and protobuffer), JSON, and Tornado web server, with fair turns.
* The Server generates a list of JSON events (documented in the REST API) for signaling to the UI Board Viewer the changes.
* Added more comments, and type annotations, to the Python code.
* Minor bug fixes.

UI Board Viewer:

* receives a buffered stream of JSON update events.
* uses SVG for displaying the board.
* is coded in Elm, a functional web-oriented programming language, managing automatically the incremental updates of the model.

Client:

* REST API for robots is specified, and generated using Swagger tool.
* `remove-robot` command is not any more supported: robots can only be created, and they disappear after they are dead.

Changed Rules of the Games:

* All values are now in float.
* Bullet damage is maximized or minimized according the initial params of the robot.

Code released under GPLv3 license.

2015-03-03
----------

The server now uses for communicating with clients:

* ZeroMQ library, instead of HTTP protocol (clients can be processed in a more fair and controllable way, respect a generic HTTP server)
* ProtoBuf for data conversions, instead of REST (data format is documented, and it is interchangeable between different programming languages, using automatic binding generation)
* REST API is mantained only for the display of the board

client/netrobots.proto contains a description of the accepted format.

client/connect.py is a class for controlling robots. The directory example contains example usages.

The server answer contains a reference to the exact "global-time" of the board simulation ticket.

A Robot reacts to 3 contemporary/optional actions:

* scan
* fire
* drive

The PHP API can send the 3 actions in the same request without needing separate threads.

The server calculate the new board, applying all the changes of robots contemporary. The only constraint it is that the clients send the command within the simulation time-frame.

The server block clients sending too much requests without waiting a response from it. The connect.py API behave always in the correct way.

2015-??-??
----------

Initial release of the project.

