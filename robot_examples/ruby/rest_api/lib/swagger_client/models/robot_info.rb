=begin
NetRobots API

NetRobots API

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  # Info about the robot.
  class RobotInfo
    attr_accessor :robot_id

    # 0 is the left most point of the board.
    attr_accessor :pos_x

    # 0 is the upper most point of the board.
    attr_accessor :pos_y

    # Direction expressed in degrees. 0 degree is EAST, 90 degree is NORTH, 180 degree is WEST, 270 degree is SOUTH
    attr_accessor :direction

    attr_accessor :current_speed

    attr_accessor :required_speed

    attr_accessor :acceleration

    # 0 if the robot can fire immediately.
    attr_accessor :reloading_time

    # 0 if the robot is dead.
    attr_accessor :health

    # the earned points.
    attr_accessor :points

    # 0 if the robot sent a command for every game turn.
    attr_accessor :missed_turns

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'robot_id' => :'robotId',
        
        :'pos_x' => :'posX',
        
        :'pos_y' => :'posY',
        
        :'direction' => :'direction',
        
        :'current_speed' => :'currentSpeed',
        
        :'required_speed' => :'requiredSpeed',
        
        :'acceleration' => :'acceleration',
        
        :'reloading_time' => :'reloadingTime',
        
        :'health' => :'health',
        
        :'points' => :'points',
        
        :'missed_turns' => :'missedTurns'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'robot_id' => :'Float',
        :'pos_x' => :'Float',
        :'pos_y' => :'Float',
        :'direction' => :'Float',
        :'current_speed' => :'Float',
        :'required_speed' => :'Float',
        :'acceleration' => :'Float',
        :'reloading_time' => :'Float',
        :'health' => :'Float',
        :'points' => :'Float',
        :'missed_turns' => :'Float'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'robotId']
        self.robot_id = attributes[:'robotId']
      end
      
      if attributes[:'posX']
        self.pos_x = attributes[:'posX']
      end
      
      if attributes[:'posY']
        self.pos_y = attributes[:'posY']
      end
      
      if attributes[:'direction']
        self.direction = attributes[:'direction']
      end
      
      if attributes[:'currentSpeed']
        self.current_speed = attributes[:'currentSpeed']
      end
      
      if attributes[:'requiredSpeed']
        self.required_speed = attributes[:'requiredSpeed']
      end
      
      if attributes[:'acceleration']
        self.acceleration = attributes[:'acceleration']
      end
      
      if attributes[:'reloadingTime']
        self.reloading_time = attributes[:'reloadingTime']
      end
      
      if attributes[:'health']
        self.health = attributes[:'health']
      end
      
      if attributes[:'points']
        self.points = attributes[:'points']
      end
      
      if attributes[:'missedTurns']
        self.missed_turns = attributes[:'missedTurns']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          robot_id == o.robot_id &&
          pos_x == o.pos_x &&
          pos_y == o.pos_y &&
          direction == o.direction &&
          current_speed == o.current_speed &&
          required_speed == o.required_speed &&
          acceleration == o.acceleration &&
          reloading_time == o.reloading_time &&
          health == o.health &&
          points == o.points &&
          missed_turns == o.missed_turns
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [robot_id, pos_x, pos_y, direction, current_speed, required_speed, acceleration, reloading_time, health, points, missed_turns].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
