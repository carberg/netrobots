=begin
NetRobots API

NetRobots API

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  # Initial settings of the board.
  class BoardInfo
    attr_accessor :max_board_x

    attr_accessor :max_board_y

    # the time in real seconds, beetwen event lists
    attr_accessor :stream_delay

    # Every robot can send and execute a command only after this simulated interval of time.
    attr_accessor :turn_delta_time

    # Every robot can send a command only after this interval of time.
    attr_accessor :network_latency

    # The events starts at the specified simulation time.
    attr_accessor :start_time

    # The events ends at the specified simulation time.
    attr_accessor :end_time

    attr_accessor :events

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'max_board_x' => :'maxBoardX',
        
        :'max_board_y' => :'maxBoardY',
        
        :'stream_delay' => :'streamDelay',
        
        :'turn_delta_time' => :'turnDeltaTime',
        
        :'network_latency' => :'networkLatency',
        
        :'start_time' => :'startTime',
        
        :'end_time' => :'endTime',
        
        :'events' => :'events'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'max_board_x' => :'Float',
        :'max_board_y' => :'Float',
        :'stream_delay' => :'Float',
        :'turn_delta_time' => :'Float',
        :'network_latency' => :'Float',
        :'start_time' => :'Float',
        :'end_time' => :'Float',
        :'events' => :'Array<Event>'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'maxBoardX']
        self.max_board_x = attributes[:'maxBoardX']
      end
      
      if attributes[:'maxBoardY']
        self.max_board_y = attributes[:'maxBoardY']
      end
      
      if attributes[:'streamDelay']
        self.stream_delay = attributes[:'streamDelay']
      end
      
      if attributes[:'turnDeltaTime']
        self.turn_delta_time = attributes[:'turnDeltaTime']
      end
      
      if attributes[:'networkLatency']
        self.network_latency = attributes[:'networkLatency']
      end
      
      if attributes[:'startTime']
        self.start_time = attributes[:'startTime']
      end
      
      if attributes[:'endTime']
        self.end_time = attributes[:'endTime']
      end
      
      if attributes[:'events']
        if (value = attributes[:'events']).is_a?(Array)
          self.events = value
        end
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          max_board_x == o.max_board_x &&
          max_board_y == o.max_board_y &&
          stream_delay == o.stream_delay &&
          turn_delta_time == o.turn_delta_time &&
          network_latency == o.network_latency &&
          start_time == o.start_time &&
          end_time == o.end_time &&
          events == o.events
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [max_board_x, max_board_y, stream_delay, turn_delta_time, network_latency, start_time, end_time, events].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
