# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class BoardInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BoardInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'max_board_x': 'float',
            'max_board_y': 'float',
            'stream_delay': 'float',
            'turn_delta_time': 'float',
            'network_latency': 'float',
            'start_time': 'float',
            'end_time': 'float',
            'events': 'list[Event]'
        }

        self.attribute_map = {
            'max_board_x': 'maxBoardX',
            'max_board_y': 'maxBoardY',
            'stream_delay': 'streamDelay',
            'turn_delta_time': 'turnDeltaTime',
            'network_latency': 'networkLatency',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'events': 'events'
        }

        self._max_board_x = None
        self._max_board_y = None
        self._stream_delay = None
        self._turn_delta_time = None
        self._network_latency = None
        self._start_time = None
        self._end_time = None
        self._events = None

    @property
    def max_board_x(self):
        """
        Gets the max_board_x of this BoardInfo.


        :return: The max_board_x of this BoardInfo.
        :rtype: float
        """
        return self._max_board_x

    @max_board_x.setter
    def max_board_x(self, max_board_x):
        """
        Sets the max_board_x of this BoardInfo.


        :param max_board_x: The max_board_x of this BoardInfo.
        :type: float
        """
        self._max_board_x = max_board_x

    @property
    def max_board_y(self):
        """
        Gets the max_board_y of this BoardInfo.


        :return: The max_board_y of this BoardInfo.
        :rtype: float
        """
        return self._max_board_y

    @max_board_y.setter
    def max_board_y(self, max_board_y):
        """
        Sets the max_board_y of this BoardInfo.


        :param max_board_y: The max_board_y of this BoardInfo.
        :type: float
        """
        self._max_board_y = max_board_y

    @property
    def stream_delay(self):
        """
        Gets the stream_delay of this BoardInfo.
        the time in real seconds, beetwen event lists

        :return: The stream_delay of this BoardInfo.
        :rtype: float
        """
        return self._stream_delay

    @stream_delay.setter
    def stream_delay(self, stream_delay):
        """
        Sets the stream_delay of this BoardInfo.
        the time in real seconds, beetwen event lists

        :param stream_delay: The stream_delay of this BoardInfo.
        :type: float
        """
        self._stream_delay = stream_delay

    @property
    def turn_delta_time(self):
        """
        Gets the turn_delta_time of this BoardInfo.
        Every robot can send and execute a command only after this simulated interval of time.

        :return: The turn_delta_time of this BoardInfo.
        :rtype: float
        """
        return self._turn_delta_time

    @turn_delta_time.setter
    def turn_delta_time(self, turn_delta_time):
        """
        Sets the turn_delta_time of this BoardInfo.
        Every robot can send and execute a command only after this simulated interval of time.

        :param turn_delta_time: The turn_delta_time of this BoardInfo.
        :type: float
        """
        self._turn_delta_time = turn_delta_time

    @property
    def network_latency(self):
        """
        Gets the network_latency of this BoardInfo.
        Every robot can send a command only after this interval of time.

        :return: The network_latency of this BoardInfo.
        :rtype: float
        """
        return self._network_latency

    @network_latency.setter
    def network_latency(self, network_latency):
        """
        Sets the network_latency of this BoardInfo.
        Every robot can send a command only after this interval of time.

        :param network_latency: The network_latency of this BoardInfo.
        :type: float
        """
        self._network_latency = network_latency

    @property
    def start_time(self):
        """
        Gets the start_time of this BoardInfo.
        The events starts at the specified simulation time.

        :return: The start_time of this BoardInfo.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this BoardInfo.
        The events starts at the specified simulation time.

        :param start_time: The start_time of this BoardInfo.
        :type: float
        """
        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this BoardInfo.
        The events ends at the specified simulation time.

        :return: The end_time of this BoardInfo.
        :rtype: float
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this BoardInfo.
        The events ends at the specified simulation time.

        :param end_time: The end_time of this BoardInfo.
        :type: float
        """
        self._end_time = end_time

    @property
    def events(self):
        """
        Gets the events of this BoardInfo.


        :return: The events of this BoardInfo.
        :rtype: list[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this BoardInfo.


        :param events: The events of this BoardInfo.
        :type: list[Event]
        """
        self._events = events

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

