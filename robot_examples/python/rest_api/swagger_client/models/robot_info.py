# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RobotInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RobotInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'robot_id': 'float',
            'pos_x': 'float',
            'pos_y': 'float',
            'direction': 'float',
            'current_speed': 'float',
            'required_speed': 'float',
            'acceleration': 'float',
            'reloading_time': 'float',
            'health': 'float',
            'points': 'float'
        }

        self.attribute_map = {
            'robot_id': 'robotId',
            'pos_x': 'posX',
            'pos_y': 'posY',
            'direction': 'direction',
            'current_speed': 'currentSpeed',
            'required_speed': 'requiredSpeed',
            'acceleration': 'acceleration',
            'reloading_time': 'reloadingTime',
            'health': 'health',
            'points': 'points'
        }

        self._robot_id = None
        self._pos_x = None
        self._pos_y = None
        self._direction = None
        self._current_speed = None
        self._required_speed = None
        self._acceleration = None
        self._reloading_time = None
        self._health = None
        self._points = None

    @property
    def robot_id(self):
        """
        Gets the robot_id of this RobotInfo.


        :return: The robot_id of this RobotInfo.
        :rtype: float
        """
        return self._robot_id

    @robot_id.setter
    def robot_id(self, robot_id):
        """
        Sets the robot_id of this RobotInfo.


        :param robot_id: The robot_id of this RobotInfo.
        :type: float
        """
        self._robot_id = robot_id

    @property
    def pos_x(self):
        """
        Gets the pos_x of this RobotInfo.


        :return: The pos_x of this RobotInfo.
        :rtype: float
        """
        return self._pos_x

    @pos_x.setter
    def pos_x(self, pos_x):
        """
        Sets the pos_x of this RobotInfo.


        :param pos_x: The pos_x of this RobotInfo.
        :type: float
        """
        self._pos_x = pos_x

    @property
    def pos_y(self):
        """
        Gets the pos_y of this RobotInfo.


        :return: The pos_y of this RobotInfo.
        :rtype: float
        """
        return self._pos_y

    @pos_y.setter
    def pos_y(self, pos_y):
        """
        Sets the pos_y of this RobotInfo.


        :param pos_y: The pos_y of this RobotInfo.
        :type: float
        """
        self._pos_y = pos_y

    @property
    def direction(self):
        """
        Gets the direction of this RobotInfo.
        Direction expressed in degrees. 0 degree is EAST, 90 degree is NORTH, 180 degree is WEST, 270 degree is SOUTH

        :return: The direction of this RobotInfo.
        :rtype: float
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this RobotInfo.
        Direction expressed in degrees. 0 degree is EAST, 90 degree is NORTH, 180 degree is WEST, 270 degree is SOUTH

        :param direction: The direction of this RobotInfo.
        :type: float
        """
        self._direction = direction

    @property
    def current_speed(self):
        """
        Gets the current_speed of this RobotInfo.


        :return: The current_speed of this RobotInfo.
        :rtype: float
        """
        return self._current_speed

    @current_speed.setter
    def current_speed(self, current_speed):
        """
        Sets the current_speed of this RobotInfo.


        :param current_speed: The current_speed of this RobotInfo.
        :type: float
        """
        self._current_speed = current_speed

    @property
    def required_speed(self):
        """
        Gets the required_speed of this RobotInfo.


        :return: The required_speed of this RobotInfo.
        :rtype: float
        """
        return self._required_speed

    @required_speed.setter
    def required_speed(self, required_speed):
        """
        Sets the required_speed of this RobotInfo.


        :param required_speed: The required_speed of this RobotInfo.
        :type: float
        """
        self._required_speed = required_speed

    @property
    def acceleration(self):
        """
        Gets the acceleration of this RobotInfo.


        :return: The acceleration of this RobotInfo.
        :rtype: float
        """
        return self._acceleration

    @acceleration.setter
    def acceleration(self, acceleration):
        """
        Sets the acceleration of this RobotInfo.


        :param acceleration: The acceleration of this RobotInfo.
        :type: float
        """
        self._acceleration = acceleration

    @property
    def reloading_time(self):
        """
        Gets the reloading_time of this RobotInfo.
        0 if the robot can fire immediately.

        :return: The reloading_time of this RobotInfo.
        :rtype: float
        """
        return self._reloading_time

    @reloading_time.setter
    def reloading_time(self, reloading_time):
        """
        Sets the reloading_time of this RobotInfo.
        0 if the robot can fire immediately.

        :param reloading_time: The reloading_time of this RobotInfo.
        :type: float
        """
        self._reloading_time = reloading_time

    @property
    def health(self):
        """
        Gets the health of this RobotInfo.
        0 if the robot is dead.

        :return: The health of this RobotInfo.
        :rtype: float
        """
        return self._health

    @health.setter
    def health(self, health):
        """
        Sets the health of this RobotInfo.
        0 if the robot is dead.

        :param health: The health of this RobotInfo.
        :type: float
        """
        self._health = health

    @property
    def points(self):
        """
        Gets the points of this RobotInfo.
        the earned points.

        :return: The points of this RobotInfo.
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """
        Sets the points of this RobotInfo.
        the earned points.

        :param points: The points of this RobotInfo.
        :type: float
        """
        self._points = points

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

