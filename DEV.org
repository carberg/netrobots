* Development Notes 

The application is in development/alpha phase. There are still many TODO inside the source code files, and these notes.

TODO rebase debug branch, update master, delete debug locally and on the remote server

TODO add in the README of GitHub a screenshoot of the game.

TODO add a README.md file for each important directory

** TODO Game Server 
TODO remove not used code
TODO adapt the README of the application
TODO create a standard Setupy.py file and study the Pip.py approach, because up to date development is done using nix
*** TODO Test installation inside a Docker container
***** TODO create Dockerfile
***** TODO publish also the Dockerfile, as an alternative method respect NixOS
***** TODO check the requirements.txt files
*** TODO Game Server Stats
 Informs for each client of:
 - latency of each client communication
 - CPU load on the server (tested now and it is very very low)

 Latency tests: 40 ms verso google, 80 ms verso il server in germania (millisecodi) da casa mia.

 TODO include note on latency and on division between simulation time and network communication time

** TODO Board Viewer
*** Why Elm
- DOM model is efficiently update from Elm
- a simple DOM creation code is created, and then Elm calculate automatically efficient incremental updates, because the creation code is declarative
- static typing and assurance of code without run-time errors
- reasonable compact JavaScript code is generated
- competitive in performances (better) than JavaScript reactive libraries

*** Server Client Communication
Event-based synchro:
- the server send high-level commands like:
  - create robot (ID) - the JS mantain a relationship
  - destroy robot (ID) 
  - create missile with direction, speed and acceleration
  - explosion at position and duration
  - drive: robot, from, to, direction, acceleration, final speed
  - scan: robot, direction, result, ecc...
- the server does not send low level events like intermediate position of robots and missiles
- the client interpolate the robot and missile position, according the redraw time
- if there is an event changing direction/acceleration and other info of interpolated objects, the client is informed from the server, so the client position calculations are always exact

TODO complete the package description file of ELM at the end
TODO remove not used code for the old Boand JS based


*** TODO Various Improvements
TODO do not display any more the board limits

MAYBE clip explosions, missiles and so on inside the board

TODO points lost on collision seems excessive

MAYBE dead robots must remain in the leggend with their points and the time they lived

TODO the home-page should include:
TODO reference to the project home-page
TODO REST-API documentation automatically generated
DONE link to the board

DONE initial screen:
- JS ask for buffering
- JS show a SVG animation with the waiting of new data
- JS start displaying the board

TODO use a ticket that is an integer multiple of the turn

TODO check the behaviour of the sniper comparing with the traditional sniper

MAYBE when scan aperture is 180 nothing is displayed

TODO send also complete stats about missing turns of the ROBOTS

TODO sniper continue firing after the first stop
TODO cannonReloadingTime is
How many seconds the robot must wait before firing another missile. Min value: 2s. Max value: 6s. Deafault value: 2s.
but it does not seem respected!

TODO create an initial home-page for the project, the REST-API and so on
TODO include stats with boardinfo about robots missing commands, and so on
TODO document for user the differences between time-simulation tick (the virtual speed of a robot), and the network latency

TODO improve the streaming process:
- TODO before init tell that the board is loading 
- TODO show initial board
- TODO show at the center of the board the streaming message, and the remaining time

TODO manage the correct real-time time-frame

TODO add keyed elements/nodes, for board parts that are subject to frequent add and remove of node
TODO add lazy nodes (if they speedup performances), in particular standard symbols definitions and so on
TODO use lazy and dynamic nodes, because with paths and so on i generate a lot of points

TODO remove debug lines from scan

TODO check remanining TODO on the BoardViewer.elm file

TODO show server version number
TODO show the API version number
TODO show the characteristics of robots on the board

** TODO Client Robots
TODO when the server send an error message into http the Python client library start an infinite loop and uses 100% of CPU resources

*** Haskell Robot
TODO include the FRP framework version into this projet
TODO test with a simple robot
TODO make it compile under nix and Stack
TODO annotate the original HRobots project, that the new reference repo is ...

* Game Rules Improvements
MAYBE hitting an enemy is 1/2 damage as health

MAYBE there are no hitting/premium points for the damage on the enemy robot (maybe)

MAYBE the API signal if a Robot hit the wall or another robot with a specific message

TODO use 0 for north direction

** Robot Parameter Customizations

Robots can be created using different parameters, like speed, acceleration, bullet damage.

The method

    server.game_model.Robot.get_configured_strength(self):

make an estimate of the robot characteristics, and it filter out Robots that are too much strong.

With time and experience, this method should be improved, for avoiding Robot with unfair advantages.

