* Development Notes 
** Status
The application is in alpha/beta phase: all the main features are complete, but they are not completely tested, and there are various improvements to do. 
** Design Overview
The REST API for controlling the Robots in the arena, is written in Swagger YAML format, and then low-level code is generated for each supported programming language. See `doc/rest_api.yaml` and `dev_scripts/` directory.

The server is written in Python using the Tornado HTTP server/framework. See `server` directory.

The board viewer is written in Elm, and then Java Script code is generated. The board viewer graphics is in SVG.
** Development Environment
Up to date Nix is used. The required packages are in `default.nix` files inside each directory.

TODO support also Docker
** Game Server 
TODO create a standard Setupy.py file and study the Pip.py approach, because up to date development is done using Nix
TOOD support Docker:
- TODO create Docker build
- TODO document how to use it
TODO support remote secure gaming environments

TODO use a ticket that is an integer multiple of the turn
TODO show server version number
TODO show the API version number
TODO compress events to remote board viewers, because they are not so small (45kb every 5 seconds)
TODO the server is not fast: profile and search what are the slow functions
TODO make sure of sending compressed js files

*** Versioning
TODO use the version info in `doc/rest_api.yaml` for:
- a client check if the REST API has the expected version
- showing the server version in the home page

*** Network and Game Server Tuning 
MAYBE move these notes on README file

The tunings are:
- CPU usage in case the game server host also the running clients. Otherwise CPU usage of the server alone is low enough
- network latency: the time required for a client robot to receive the new board status, and sending a new command to the remote server
 
The server can be configured for using a virtual simulation time, and a physical (real-world) network latency. The latency can be callibrated according the latency of the slowest client.

** Game Board Viewer Design
*** Server Client Communication
Event-based synchro:
- the server send high-level commands like:
  - create robot (ID) - the JS mantain a relationship
  - destroy robot (ID) 
  - create missile with direction, speed and acceleration
  - explosion at position and duration
  - drive: robot, from, to, direction, acceleration, final speed
  - scan: robot, direction, result, ecc...
- the server does not send low level events like intermediate position of robots and missiles
- the client interpolate the robot and missile position, according the redraw time
- if there is an event changing direction/acceleration and other info of interpolated objects, the client is informed from the server, so the client position calculations are always exact

Server sends events in chunks and streamed.
*** Why Elm
- DOM model is efficiently update from Elm
- a simple DOM creation code is created, and then Elm calculate automatically efficient incremental updates, because the creation code is declarative
- static typing and assurance of code without run-time errors
- reasonable compact JavaScript code is generated
- competitive in performances respect common JavaScript reactive libraries

*** TODO Various Improvements
TODO show robot configurations on a table
TODO sniper fires at an high frequency 
TODO cannonReloadingTime is
How many seconds the robot must wait before firing another missile. Min value: 2s. Max value: 6s. Deafault value: 2s.
but it does not seem respected!
MAYBE clip explosions, missiles and so on inside the board
MAYBE dead robots must remain in the leggend with their points and the time they lived
TODO points lost on collision seems excessive
** Client Robots
TODO port the code of the sniper from examples directory
TODO remove old examples directory

*** Haskell Robot
TODO include the FRP framework version into this projet
TODO test with a simple robot
TODO make it compile under nix and Stack
TODO annotate the original HRobots project, that the new reference repo is ...

* Game Rules Improvements
MAYBE hitting an enemy is 1/2 damage as health

MAYBE there are no hitting/premium points for the damage on the enemy robot (maybe)

MAYBE the API signal if a Robot hit the wall or another robot with a specific message

TODO use 0 for north direction

** Robot Parameter Customizations

Robots can be created using different parameters, like speed, acceleration, bullet damage.

The method

    server.game_model.Robot.get_configured_strength(self):

make an estimate of the robot characteristics, and it filter out Robots that are too much strong.

With time and experience, this method should be improved, for avoiding Robot with unfair advantages.

